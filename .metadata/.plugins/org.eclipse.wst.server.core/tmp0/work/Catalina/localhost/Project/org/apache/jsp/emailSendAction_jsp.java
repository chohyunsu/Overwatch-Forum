/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-12-16 07:21:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.jsp.tagext.TryCatchFinally;
import java.io.PrintWriter;
import user.UserDAO;
import javax.mail.*;
import utility.SHA256;
import utility.Gmail;
import java.util.Properties;

public final class emailSendAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.mail");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.mail.internet.InternetAddress");
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("utility.SHA256");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("javax.mail.internet.MimeMessage");
    _jspx_imports_classes.add("utility.Gmail");
    _jspx_imports_classes.add("user.UserDAO");
    _jspx_imports_classes.add("javax.servlet.jsp.tagext.TryCatchFinally");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   <!-- 속성을 정의할때 쓰는 라이브러리  -->\r\n");
      out.write("    \r\n");

	UserDAO userDAO = new UserDAO();
	String userID = null;
	if(session.getAttribute("userID") != null) {
		userID = (String) session.getAttribute("userID");    // 회원가입 userRegisterAction에서 session값으로 해당 ID로 설정해줌
	}                                                       // 로그인을 햇을때는 session값으로 ID가 설정되어잇음.
	
	 if(userID == null) {
		PrintWriter script = response.getWriter();
		script.println("<script>");
		script.println("alert('로그인을 해주세요.');");
		script.println("location.href='userLogin.jsp'");
		script.println("</script>");
		script.close();
		return;
	} 
	
	boolean emailChecked = userDAO.getUserEmailChecked(userID);  // 특정한 사용자가 이메일 인증이 되었는지 확인
	
	if(emailChecked == true) {               // 이메일 인증을 완료환 사용자일때
		PrintWriter script = response.getWriter();
		script.println("<script>");
		script.println("alert('이메일 인증이 완료된 회원입니다.');");
		script.println("location.href='index.jsp'");
		script.println("</script>");
		script.close();
		return;                // 종료
	}
	
	//  이메일 인증이 안된 사용자라면 사용자에게 이메일 인증 메시지를 보내줄것임. (구글 SMTP가 기본적으로 제공하는 양식을 사용)
	//String host = "http://localhost:8088/Project/";      // 웹사이트 주소를 넣어줌.
	String host = "http://172.18.7.181:8088/Project/";      // 웹사이트 주소를 넣어줌.
	String from = "chohyunsu1996@gmail.com";           // 보내는 사람 (나의 구글 이메일 계정)
	String to = userDAO.getUserEmail(userID);      // 받는 사람
	String subject = "Email verification email for the Overwatch forum";       // 보낼 이메일의 제목
    String content = "다음 링크에 접속하여 이메일 인증을 진행해주세요." +     // 보낼 이메일의 내용 + 링크를 통해 해쉬값을 적용해서 emailCheckAction으로 code값에 실어서 보냄
    "<a href='" + host + "emailCheckAction.jsp?code=" + new SHA256().getSHA256(to) + "'>이메일 인증하기</a>";      
			
	// SMTP에 접속하기위한 정보를 넣어줌.
	Properties p = new Properties();
	p.put("mail.smtp.user", from);              // user를 나의 구글 아이디로 넣어줌.
	p.put("mail.smtp.host", "smtp.googlemail.com");      // 구글에서 제공하는 smtp server (구글 smtp주소)
	p.put("mail.smtp.port", "465");           // port는 465번을 사용. (구글에서 제공해주는 것임.(정해져 있는것.)) 
	p.put("mail.smtp.starttls.enable", "true");        //starttls를 사용가능하게 true로 줌.  (starttls는 웹 브라우저에서 실행되는 전자메일 클라이언트를 포함한 전자메일 클라이언트를
			                                           //포함한 전자메일 클라이언트가 기존의 안전하지 않은 연결을 안전한 연결로 전환하려고한다는 것을 전자메일 서버에 알려주는
			                                           // 전자메일 프로토콜 명령이다.) 
	p.put("mail.smtp.auth", "true");          //smtp 권한을 true로 줌.
	p.put("mail.smtp.debug", "true");          //debug를 true로 줌으로써 SMTP 서버를 통해서 이메일을 보내거나 연결하는데에 있어서 문제가생기면 문제에대해서 많은 정보를 제공해준다.
	p.put("mail.smtp.socketFactory.port", "465");      //지정된 소켓팩토리를 사용할때 연결할 포트설정 
	p.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");         // SMTP 소켓을 만듬.
	p.put("mail.smtp.socketFactory.fallback", "false");     // 이것이 true면 내가 지정한 소켓팩토리 클래스를 사용하여 소켓을 작성하지 못하면 특정한 클래스를 사용하여 소켓이 작성됨.
	
	// 이메일을 전송하는 부분
	try {                              // 구글 Gmail의 인증을 수행해서 사용자에게 관리자의 이메일주소로 이메일 인증주소를 전송하는 부분.
		Authenticator auth = new Gmail();
		Session ses = Session.getInstance(p, auth);
		ses.setDebug(true);
		MimeMessage msg = new MimeMessage(ses);
		msg.setSubject(subject);
		Address fromAddr = new InternetAddress(from);
		msg.setFrom(fromAddr);
		Address toAddr = new InternetAddress(to);
		msg.addRecipient(Message.RecipientType.TO, toAddr);      // 첫번째 인자값으로 받는사람의 이메일주소를 따옴.
		msg.setContent(content, "text/html;charset=UTF-8");
		Transport.send(msg);
		
	} catch(Exception e) {
		e.printStackTrace();
		PrintWriter script = response.getWriter();
		script.println("<script>");
		script.println("alert('오류가 발생했습니다.');");
		script.println("history.back();");
		script.println("</script>");
		script.close();
		return;
	}

      out.write(" \r\n");
      out.write("<!doctype html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("  <head>\r\n");
      out.write("\r\n");
      out.write("    <title>Overwatch Forums</title>\r\n");
      out.write("\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("\r\n");
      out.write("    <!-- 부트스트랩 CSS 추가하기 -->\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("    <!-- 커스텀 CSS 추가하기 -->\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"./css/custom.css\">\r\n");
      out.write("    \r\n");
      out.write("    <style>\r\n");
      out.write("    \t#brand-image\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\theight:50px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t \t.navbar\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tbackground-image: url(img/blizarrdbg.jpg);\r\n");
      out.write("\t\t\tbackground-repeat: no-repeat;\r\n");
      out.write("\t\t\t-webkit-background-size: cover;\r\n");
      out.write("    \t\t-moz-background-size: cover;\r\n");
      out.write("    \t\t-o-background-size: cover;\r\n");
      out.write("\t\t\tbackground-size: cover;\r\n");
      out.write("\t    \tbackground-position:center center;  \t\r\n");
      out.write("\t\t}  \r\n");
      out.write("\t\tbody\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tbackground-image: url(img/blizarrdbg.jpg);\r\n");
      out.write("\t\t\tbackground-repeat: no-repeat;\r\n");
      out.write("\t\t\t-webkit-background-size: cover;                 /* webkit부터 3줄은 웹페이지를 줄엿을때도 이미지를 설정한값으로 유지하게하려고 넣어줌. */\r\n");
      out.write("    \t\t-moz-background-size: cover;\r\n");
      out.write("    \t\t-o-background-size: cover; \r\n");
      out.write("    \t\tbackground-size: cover;\r\n");
      out.write("\t\t}\r\n");
      out.write("    </style>\r\n");
      out.write("\r\n");
      out.write("  </head>\r\n");
      out.write("\r\n");
      out.write("  <body>\r\n");
      out.write("\r\n");
      out.write("    <nav class=\"navbar navbar-expand-lg navbar-light bg-primary \">\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"index.jsp\">\r\n");
      out.write("      \t\t오버워치 토론장\r\n");
      out.write("      \t\t<img id=\"brand-image\" src=\"img/blizarrd3.jpg\" alt=\"Website Logo\" > \r\n");
      out.write("      </a>\r\n");
      out.write("\r\n");
      out.write("      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar\">\r\n");
      out.write("\r\n");
      out.write("        <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("\r\n");
      out.write("      </button>\r\n");
      out.write("\r\n");
      out.write("      <div class=\"collapse navbar-collapse\" id=\"navbar\">\r\n");
      out.write("\r\n");
      out.write("        <ul class=\"navbar-nav mr-auto\">\r\n");
      out.write("\r\n");
      out.write("          <li class=\"nav-item active\">\r\n");
      out.write("\r\n");
      out.write("            <a class=\"nav-link\" href=\"index.jsp\">메인</a>\r\n");
      out.write("\r\n");
      out.write("          </li>\r\n");
      out.write("\r\n");
      out.write("          <li class=\"nav-item dropdown\">\r\n");
      out.write("\r\n");
      out.write("            <a class=\"nav-link dropdown-toggle\" id=\"dropdown\" data-toggle=\"dropdown\">\r\n");
      out.write("\r\n");
      out.write("              회원 관리\r\n");
      out.write("\r\n");
      out.write("            </a>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"dropdown-menu\" aria-labelledby=\"dropdown\">\r\n");
      out.write("\r\n");
      out.write("              <a class=\"dropdown-item\" href=\"userLogin.jsp\">로그인</a>\r\n");
      out.write("\r\n");
      out.write("              <a class=\"dropdown-item\" href=\"userRegister.jsp\">회원가입</a>\r\n");
      out.write("\r\n");
      out.write("              <a class=\"dropdown-item\" href=\"userLogout.jsp\">로그아웃</a>\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("          </li>\r\n");
      out.write("\r\n");
      out.write("        </ul>\r\n");
      out.write("\r\n");
      out.write("        <form action=\"./index.jsp\" method=\"get\" class=\"form-inline my-2 my-lg-0\">\r\n");
      out.write("\r\n");
      out.write("          <input type=\"text\" name=\"search\" class=\"form-control mr-sm-2\" placeholder=\"내용을 입력하세요.\">\r\n");
      out.write("\r\n");
      out.write("          <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">검색</button>\r\n");
      out.write("\r\n");
      out.write("        </form>\r\n");
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("\t</div>\r\n");
      out.write("    </nav>\r\n");
      out.write("    \r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("    \t<div class=\"alert alert-success mt-4\" role=\"alert\">\r\n");
      out.write("    \t\t이메일 주소 인증 메일이 전송되었습니다. 회원가입시 등록하셨던 이메일에 들어가셔서 인증해주세요.\r\n");
      out.write("    \t</div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("    <!-- 제이쿼리 자바스크립트 추가하기 -->\r\n");
      out.write("\r\n");
      out.write("    <script src=\"./js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <!-- Popper 자바스크립트 추가하기 -->\r\n");
      out.write("\r\n");
      out.write("    <script src=\"./js/popper.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <!-- 부트스트랩 자바스크립트 추가하기 -->\r\n");
      out.write("\r\n");
      out.write("    <script src=\"./js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("  </body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
