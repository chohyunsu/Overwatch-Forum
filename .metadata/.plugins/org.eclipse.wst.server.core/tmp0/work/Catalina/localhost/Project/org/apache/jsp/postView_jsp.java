/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-12-14 13:01:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;
import post.postDTO;
import post.postDAO;

public final class postView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("post.postDAO");
    _jspx_imports_classes.add("post.postDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"./postViewErrorHandler.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <!-- page 지시문의 errorPage를 \"errorHandler.jsp로 설정  -->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- 부트스트랩3.0부터는 모바일 친화적이므로 이 코드를 써줌. -->\r\n");
      out.write("<!-- 부트스트랩 CSS 추가하기 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\">\r\n");
      out.write("<!-- 커스텀 CSS 추가하기 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/custom.css\">\r\n");
      out.write("<title>Overwatch Forums</title>\r\n");
      out.write("<style>\r\n");
      out.write("\t#brand-image\r\n");
      out.write("\t{\r\n");
      out.write("\t\theight:50px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tbody\r\n");
      out.write("\t{\r\n");
      out.write("\t\tbackground-color: black;\r\n");
      out.write("\t} \r\n");
      out.write("\t.modal-content\r\n");
      out.write("\t{\r\n");
      out.write("\t\tbackground-image: url(img/mainbackgroundmodal.png);\r\n");
      out.write("\t\tbackground-repeat: no-repeat;\r\n");
      out.write("\t\t-webkit-background-size: cover;                 /* webkit부터 3줄은 웹페이지를 줄엿을때도 이미지를 설정한값으로 유지하게하려고 넣어줌. */\r\n");
      out.write("    \t-moz-background-size: cover;\r\n");
      out.write("    \t-o-background-size: cover;\r\n");
      out.write("    \tbackground-size: cover;\r\n");
      out.write("\t}\r\n");
      out.write("\t .navbar\r\n");
      out.write("\t{\r\n");
      out.write("\t\tbackground-image: url(img/mainbackground.png);\r\n");
      out.write("\t\tbackground-repeat: no-repeat;\r\n");
      out.write("\t\t-webkit-background-size: cover;\r\n");
      out.write("    \t-moz-background-size: cover;\r\n");
      out.write("    \t-o-background-size: cover;\r\n");
      out.write("\t\t/* background-size: cover; */\r\n");
      out.write("\t  /*   background-position:center center;  \t */\r\n");
      out.write("\t}  \r\n");
      out.write("\t \r\n");
      out.write("\ta, a:hover {\r\n");
      out.write("\t\tcolor: white;\r\n");
      out.write("\t\ttext-decoration: none;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttable, thead\r\n");
      out.write("\t{\r\n");
      out.write("\t\tbackground-image: url(img/overwatch_bg.jpg);\r\n");
      out.write("\t\tbackground-repeat: no-repeat;\r\n");
      out.write("\t\tbackground-size: cover;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttbody\r\n");
      out.write("\t{\r\n");
      out.write("\t\tcolor: white;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");

		String userID = null;
		if(session.getAttribute("userID") != null) {           // 로그인이 된 상태라면 
			userID = (String) session.getAttribute("userID");
		}
		int postID = 0;
		if(request.getParameter("postID") != null) {                   //글번호가 정상적으로 넘어왔다면
			postID = Integer.parseInt(request.getParameter("postID"));
		}
		if(postID == 0) {
			PrintWriter script = response.getWriter();
			script.println("<script>");
			script.println("alert('유효하지 않은 글입니다.')");
			script.println("location.href= 'index.jsp'");
			script.println("</script>");
			script.close();
		}
		
		postDTO postdto = new postDAO().getPostDto(postID);           // 유효한 글이라면 postdto에 담아둠.
		
		if(userID == session.getAttribute("userID")){
			new postDAO().count(postID);
		}
	
      out.write("\r\n");
      out.write("\t<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\">        <!-- bg는 background의 약자임. -->\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"index.jsp\">       <!-- 로고 -->\r\n");
      out.write("      \t오버워치 토론장\r\n");
      out.write("      \t<img id=\"brand-image\" src=\"img/blizarrd3.jpg\" alt=\"Website Logo\" > \r\n");
      out.write("      </a>\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar\">\r\n");
      out.write("\r\n");
      out.write("        <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("\r\n");
      out.write("      </button>\r\n");
      out.write("\r\n");
      out.write("      <div class=\"collapse navbar-collapse\" id=\"navbar\">\r\n");
      out.write("\r\n");
      out.write("        <ul class=\"navbar-nav mr-auto\">                  <!-- 리스트를 구현 -->\r\n");
      out.write("\r\n");
      out.write("          <li class=\"nav-item active\">\r\n");
      out.write("\r\n");
      out.write("            <a class=\"nav-link\" href=\"index.jsp\">메인</a>\r\n");
      out.write("\r\n");
      out.write("          </li>\r\n");
      out.write("\r\n");
      out.write("           <li class=\"nav-item dropdown\">\r\n");
      out.write("\r\n");
      out.write("            <a class=\"nav-link dropdown-toggle\" id=\"dropdown\" data-toggle=\"dropdown\">\r\n");
      out.write("\r\n");
      out.write("              회원 관리\r\n");
      out.write("\r\n");
      out.write("            </a>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"dropdown-menu\" aria-labelledby=\"dropdown\">\r\n");
      out.write("           \r\n");
      out.write("              <a class=\"dropdown-item\" href=\"userLogout.jsp\">로그아웃</a>\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("          </li>\r\n");
      out.write("\r\n");
      out.write("        </ul>\r\n");
      out.write("\r\n");
      out.write("        <form action=\"./index.jsp\" method=\"get\" class=\"form-inline my-2 my-lg-0\">\r\n");
      out.write("\r\n");
      out.write("          <input type=\"text\" name=\"search\" class=\"form-control mr-sm-2\" placeholder=\"내용을 입력하세요.\">\r\n");
      out.write("\r\n");
      out.write("          <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">검색</button>\r\n");
      out.write("\r\n");
      out.write("        </form>\r\n");
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("    </nav>\r\n");
      out.write("    \r\n");
      out.write("     <div class=\"container-fluid mt-5 pt-3\" style=\"background: url(img/mainbackground.png) no-repeat center center;\r\n");
      out.write("                      background-size: cover; height: 1000px; \">\r\n");
      out.write("    \r\n");
      out.write("    <div class=\"container mt-5 pt-5\">\r\n");
      out.write("    \t<div class=\"row\">\r\n");
      out.write("    \t\t<table class=\"table table-striped\" style=\"text-align: center; border: 1px solid #dddddd; color: #00FFCC;\">\r\n");
      out.write("    \t\t\t<thead>\r\n");
      out.write("    \t\t\t\t<tr>\r\n");
      out.write("    \t\t\t\t\t<th colspan=\"3\" style= \"text-align: center;\">게시판 글 보기 </th>\r\n");
      out.write("    \t\t\t\t</tr>\r\n");
      out.write("    \t\t\t</thead>\r\n");
      out.write("    \t\t\t<tbody>\r\n");
      out.write("    \t\t\t\t<tr>\r\n");
      out.write("    \t\t\t\t\t<td style=\"width:20%;\">글제목</td>\r\n");
      out.write("    \t\t\t\t\t<td colspan=\"2\">");
      out.print( postdto.getPostTitle().replaceAll(" ", "&nbsp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;")
     					       .replaceAll("\n","<br>")  );
      out.write("</td>\r\n");
      out.write("    \t\t\t\t</tr>\r\n");
      out.write("    \t\t\t\t<tr>\r\n");
      out.write("    \t\t\t\t\t<td>작성자</td>\r\n");
      out.write("    \t\t\t\t\t<td colspan=\"2\">");
      out.print( postdto.getUserID() );
      out.write("</td>\r\n");
      out.write("    \t\t\t\t</tr>\r\n");
      out.write("    \t\t\t\t<tr>\r\n");
      out.write("    \t\t\t\t\t<td>닉네임</td>\r\n");
      out.write("    \t\t\t\t\t<td colspan=\"2\">");
      out.print( postdto.getNickName() );
      out.write("</td>\r\n");
      out.write("    \t\t\t\t</tr>\r\n");
      out.write("    \t\t\t\t<tr>\r\n");
      out.write("    \t\t\t\t\t<td>작성일자</td>\r\n");
      out.write("    \t\t\t\t\t<td colspan=\"2\">");
      out.print( postdto.getPostDate().substring(0,11) + postdto.getPostDate().substring(11,13) 
    					        + "시" + postdto.getPostDate().substring(14,16) + "분 ");
      out.write("</td>\r\n");
      out.write("    \t\t\t\t</tr>\r\n");
      out.write("    \t\t\t\t<tr>\r\n");
      out.write("    \t\t\t\t\t<td>내용</td>\r\n");
      out.write("    \t\t\t\t\t<td colspan=\"2\" style=\"min-height: 200px; text-align: left;\">\r\n");
      out.write("    \t\t\t\t\t       ");
      out.print( postdto.getPostContent().replaceAll(" ", "&nbsp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;")
    					       .replaceAll("\n","<br>") );
      out.write("</td>\r\n");
      out.write("    \t\t\t\t</tr>\r\n");
      out.write("    \t\t\t</tbody>\r\n");
      out.write("    \t\t</table>\r\n");
      out.write("    \t\t<a href=\"index.jsp\" class=\"btn btn-primary\">목록</a>\r\n");
      out.write("    \t\t");

    			if(userID != null && userID.equals(postdto.getUserID())) {
    		
      out.write("\r\n");
      out.write("    \t\t\t\t&nbsp; <a href=\"update.jsp?postID=");
      out.print( postID );
      out.write("\" class=\"btn btn-primary\">수정</a>\r\n");
      out.write("    \t\t\t\t&nbsp; <a onclick=\"return confirm('정말로 삭제하시겠습니까?')\" href=\"deleteAction.jsp?postID=");
      out.print( postID );
      out.write("\" class=\"btn btn-primary\">삭제</a>\r\n");
      out.write("    \t\t");

    			}
    		
    		 
      out.write("\r\n");
      out.write("    \t\t &nbsp; <a onclick=\"return confirm('추천하시겠습니까?')\" href=\"recommendAction.jsp?postID=");
      out.print( postID );
      out.write("\" class=\"btn btn-primary\">추천</a>\r\n");
      out.write("    \t\t\r\n");
      out.write("    \t</div>\r\n");
      out.write("    </div>\r\n");
      out.write("   </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
